#include "cppdefs.h"
#ifdef SOLVE3D

c--# define AKIMA
c--# define CONST_TRACERS



! The following two CPPs activate switching triad and stabilizing
! algorithms. They must always be defined whenever the
! isoneutral hyperdiffusion is selected.

      subroutine step3d_t (tile)    ! the call just below are repeated 
      implicit none                 ! within the list of agruments to
      integer tile                  ! use the same memory for vertical
# include "param.h"              /* ! and horizontal scratch arrays. */ 
# include "private_scratch.h"
# include "compute_tile_bounds.h"
      call step3d_t_iso_tile (istr,iend,jstr,jend,
     &                       A2d(1,1), A2d(1,2), A2d(1,3), A2d(1,4),
     &                       A2d(1,1), A2d(1,2), A2d(1,3)
     &                                                             )
      return
      end

      subroutine step3d_t_iso_tile (istr,iend,jstr,jend, CF,FC,WC,DC 
     &                                                 ,  FX,FE, wrk1
     &                                                             )
#ifdef PFA_BY_TRACER
      use phys_flux
#endif

      implicit none
# include "param.h"
      integer istr,iend,jstr,jend, imin,imax,jmin,jmax, i,j,k
      real, dimension(PRIVATE_1D_SCRATCH_ARRAY,0:N) :: CF,FC,WC,DC
      real, dimension(PRIVATE_2D_SCRATCH_ARRAY)     :: FX, FE, wrk1
      real cff
      real, parameter :: epsil=1.E-33
      integer itrc, iAkt, iflux
# ifdef PSOURCE
      integer is
# include "sources.h"
# endif
# include "grid.h"
# include "ocean3d.h"
# include "forces.h"
# include "mixing.h"
# include "climat.h"
# include "scalars.h"
# include "eos_vars.h"
#ifdef PHYS_FLUX_ANALYSIS
# include "physflux.h"
# ifdef PFA_BY_TRACER
# include "ncroms_physflux.h"
# include "ncvars.h"
# endif
! temporary variable for calculation of vertical diffusive flux
      real ThisVDF(PRIVATE_2D_SCRATCH_ARRAY,N)
# endif /* PHYS_FLUX_ANALYSIS */

# include "compute_auxiliary_bounds.h"

# ifndef EW_PERIODIC
      if (WESTERN_EDGE) then
        imin=istr
      else
        imin=istr-1
      endif
      if (EASTERN_EDGE) then
        imax=iend
      else
        imax=iend+1
      endif
# else
      imin=istr-1
      imax=iend+1
# endif
# ifndef NS_PERIODIC
      if (SOUTHERN_EDGE) then
        jmin=jstr
      else
        jmin=jstr-1
      endif
      if (NORTHERN_EDGE) then
        jmax=jend
      else
        jmax=jend+1
      endif
# else
      jmin=jstr-1
      jmax=jend+1
# endif

      do itrc=1,NT
          do k=1,N

! Compute and add in contribution due to horizontal advection fluxes.
! Note that at this moment the content of array t(:,:,:,nnew,itrc) is
! concentration of tracer "itrc" taken at time corresponding to "nstp"
! and already MULTIPLIED by Hz(:,:,:) at "nstp" in "pre_step3d_tile".

# include "compute_horiz_tracer_fluxes.h"

            do j=jstr,jend
              do i=istr,iend
                t(i,j,k,nnew,itrc)=t(i,j,k,nnew,itrc) -dt*pm(i,j)
     &                                *pn(i,j)*( FX(i+1,j)-FX(i,j)
     &                                          +FE(i,j+1)-FE(i,j)
     &                                                           )
              enddo
            enddo                 !-->  discard FX,FE

# ifdef PHYS_FLUX_ANALYSIS
          if (itrc .le. NT_PFA) then
#  ifdef PFA_BY_TRACER
             if (wrt_pfa(itrc)) then
                iflux = pfa_out(itrc)
             else
                cycle ! skip to next k
             end if
#  else
             iflux = itrc
#  endif
! separate do loops (for better efficiency) to store the fluxes
             j_loop2: do j=Jstr,Jend
                do i=Istr,Iend+1
                                ! unit: mmol / s
                   HorXAdvFlux(i,j,k,iflux) = FX(i,j)
# ifdef MASKING
     &                  * rmask(i,j)
# endif
                end do
             end do j_loop2
             j_loop3: do j=Jstr,Jend+1
                do i=Istr,Iend
                                ! unit: mmol / s
                   HorYAdvFlux(i,j,k,iflux) = FE(i,j)
# ifdef MASKING
     &                  * rmask(i,j)
# endif
                enddo
             end do j_loop3
          end if
# endif /* PHYS_FLUX_ANALYSIS */


        enddo      !<-- k

! Compute and apply vertical advective fluxes.

        do j=jstr,jend

# include "compute_vert_tracer_fluxes.h"

          do k=1,N
            do i=istr,iend
              t(i,j,k,nnew,itrc)=t(i,j,k,nnew,itrc)-dt*pm(i,j)*pn(i,j)
     &                                             *(FC(i,k)-FC(i,k-1))
            enddo
          enddo
!** LR from old code
# ifdef PHYS_FLUX_ANALYSIS
          if (itrc .le. NT_PFA) then
#  ifdef PFA_BY_TRACER
            if (wrt_pfa(itrc)) then
             iflux = pfa_out(itrc)
#  else
             iflux = itrc
#  endif
! separate do loop (for better efficiency) to store the fluxes
             do k=0,N
                do i=Istr,Iend
               ! unit: mmol / (m2 s)
                   VertAdvFlux(i,j,k,iflux) = FC(i,k)
     &                  * pm(i,j) * pn(i,j)
# ifdef MASKING
     &                  * rmask(i,j)
# endif
                enddo
             enddo
#  ifdef PFA_BY_TRACER
            end if
#  endif
          end if
# endif /* PHYS_FLUX_ANALYSIS */
!****


! Start computation of vertical diffusion: add surface forcing fluxes

          do i=istr,iend
            t(i,j,N,nnew,itrc)=t(i,j,N,nnew,itrc)+dt*stflx(i,j,itrc)
          enddo

# ifdef FULL_PHYS_FLUX_ANALYSIS
          if (itrc .le. NT_PFA) then
! separate do loops (for better efficiency) to store the fluxes
             do i=Istr,Iend
             ! unit = mmol / (m2 s)
                TopFlux(i,j,itrc) = stflx(i,j,itrc)
#  ifdef MASKING
     &               * rmask(i,j)
#  endif
             enddo
             do i=Istr,Iend
             ! unit = mmol / (m2 s)
                BottomFlux(i,j,itrc) = 0 !-btflx(i,j,itrc)
#   ifdef MASKING
     &               * rmask(i,j)
#   endif
             enddo
          end if
# endif /* FULL_PHYS_FLUX_ANALYSIS */


# ifdef LMD_KPP
! Add the solar radiation flux in temperature equation. Also compute
! the nonlocal transport flux for unstable (convective) forcing
! conditions into matrix DC when using the Large et al. 1994 KPP
! scheme.

          if (itrc.eq.itemp) then
            do k=N-1,1,-1
              do i=istr,iend
                cff=srflx(i,j)*swr_frac(i,j,k)
#  ifdef LMD_NONLOCAL
     &                 -ghat(i,j,k)*(stflx(i,j,itemp)-srflx(i,j))
#  endif
                t(i,j,k+1,nnew,itemp)=t(i,j,k+1,nnew,itemp) -dt*cff
                t(i,j,k  ,nnew,itemp)=t(i,j,k  ,nnew,itemp) +dt*cff
              enddo
            enddo

c?? WARNING: the above implies that light (if any) reaching all the
c?? way to the bottom is entirely absorbed within the botom-most grid
c?? box, rather that reflected/scattered back to the water column. It
c?? is not clear, however, how to deal with this situation correctly
c??
c??         do i=istr,iend
c??           cff=srflx(i,j)*swr_frac(i,j,0)
c??#  ifdef LMD_NONLOCAL
c??  &               -ghat(i,j,0)*(stflx(i,j,itemp)-srflx(i,j))
c??#  endif
c??           t(i,j,1,nnew,itemp)=t(i,j,1,nnew,itemp) -dt*cff
c??         enddo

#  if defined LMD_NONLOCAL && defined SALINITY
          elseif (itrc.eq.isalt) then
            do k=N-1,1,-1
              do i=istr,iend
                cff=-dt*ghat(i,j,k)*stflx(i,j,isalt)
                t(i,j,k+1,nnew,isalt)=t(i,j,k+1,nnew,isalt) -cff
                t(i,j,k  ,nnew,isalt)=t(i,j,k  ,nnew,isalt) +cff
              enddo
            enddo
#  endif
          endif
# endif

! Perform an implicit time step for vertical diffusion
!
!   dq(k)     1     [         q(k+1)-q(k)             q(k)-q(k-1) ]
!  ------ = ----- * [ Akt(k)* ----------- - Akt(k-1)* ----------- ]
!    dt     Hz(k)   [            dz(k)                   dz(k-1)  ]
!
! where q(k) represents tracer field t(:,:,k,:,itrc). Doing so
! implies solution of a tri-diagonal system
!
!     -FC(k-1)*q_new(k-1) +[Hz(k)+FC(k-1)+FC(k)]*q_new(k)
!                       -FC(k)*q_new(k+1) = Hz(k)*q_old(k)
!
!                dt*Akt(k)
! where FC(k) = ----------- is normalized diffusivity coefficient
!                  dz(k)
!
! defined at W-points; q_new(k) is the new-time-step (unknown) tracer
! field; q_old(k) is old-time-step tracer (known).   As long as Akt(k)
! is nonnegative, the tri-diagonal matrix is diagonally dominant which
! guarantees stability of the Gaussian elimination algorithm.  Top and
! bottom boundary conditions are assumed to be no-flux, effectively
! Akt(N)=Akt(0)=0, hence FC(N)=FC(1)=0. This leads to equations for
! top and bottom grid boxes;
!
!   -FC(N-1)*q_new(N-1) +[Hz(N)+FC(N-1)]*q_new(N) = Hz(N)*q_old(N)
!
!          [Hz(1)+FC(1)]*q_new(1) -FC(1)*q_new(2) = Hz(1)*q_old(1)
!
! The FC(N)=FC(0)=0 boundary conditions does not mean that physical
! boundary conditions are no flux: the forcing fluxes have been
! applied explicitly above.  Instead, the no-flux condition should
! be interpreted as that the implicit step merely redistributes the
! tracer concentration throughout the water column. At this moment
! the content of array t(:,:,:,nnew,itrc) has meaning of Hz*tracer.
! After the implicit step it becomes just tracer.

# if defined BIOLOGY_BEC || defined BIOLOGY_NPZDOC
#  if defined PHYS_FLUX_ANALYSIS && defined VERT_DIFF_ANALYSIS
! The vertical diffusive flux is not added in a step like the other
! fluxes,
! so we store the old concentration (depth is already factored in here)
! first, 
! and then add the new concentration.
#  ifdef PFA_BY_TRACER
          if (wrt_pfa(itrc)) then
#  endif
          do k=1,N
            do i=Istr,Iend
               ThisVDF(i, j, k) = t(i,j,k,nnew,itrc)
            end do
         end do
#  ifdef PFA_BY_TRACER
          end if
#  endif
#  endif /* PHYS_FLUX_ANALYSIS & VERT_DIFF_ANALYSIS */

# endif

#  ifdef SALINITY
          iAkt=min(itrc,isalt)
#  else
          iAkt=min(itrc,itemp)
#  endif

          do i=istr,iend
            DC(i,0)=dt*pm(i,j)*pn(i,j) !<--horizontal metric

            FC(i,1)=2.*dt* Akt(i,j,1,iAkt)
     &                           /(Hz(i,j,1)+Hz(i,j,2))
            WC(i,1)=DC(i,0)*Wi(i,j,1)

            cff=1./(Hz(i,j,1) +FC(i,1)+max(WC(i,1),0.))
            CF(i,1)=cff*(      FC(i,1)-min(WC(i,1),0.))
            DC(i,1)=cff*t(i,j,1,nnew,itrc)
          enddo
          do k=2,N-1,+1
            do i=istr,iend
              FC(i,k)=2.*dt* Akt(i,j,k,iAkt)
     &                            /(Hz(i,j,k)+Hz(i,j,k+1))

              WC(i,k)=Wi(i,j,k)*DC(i,0)

              cff=1./( Hz(i,j,k) +FC(i,k)+max(WC(i,k),0.)
     &                         +FC(i,k-1)-min(WC(i,k-1),0.)
     &              -CF(i,k-1)*(FC(i,k-1)+max(WC(i,k-1),0.))
     &                                                     )

              CF(i,k)=cff*(       FC(i,k)-min(WC(i,k),0.) )

              DC(i,k)=cff*( t(i,j,k,nnew,itrc) +DC(i,k-1)*(
     &                          FC(i,k-1)+max(WC(i,k-1),0.) ))
            enddo
          enddo          !--> discard DC(:,0)
          do i=istr,iend
            t(i,j,N,nnew,itrc)=( t(i,j,N,nnew,itrc) +DC(i,N-1)*(
     &                               FC(i,N-1)+max(WC(i,N-1),0.) )
     &                   )/( Hz(i,j,N) +FC(i,N-1)-min(WC(i,N-1),0.)
     &                      -CF(i,N-1)*(FC(i,N-1)+max(WC(i,N-1),0.))
     &                                                             )
# ifdef MASKING
     &                                                *rmask(i,j)
# endif
          enddo
          do k=N-1,1,-1
            do i=istr,iend
              t(i,j,k,nnew,itrc)=(DC(i,k)+CF(i,k)*t(i,j,k+1,nnew,itrc))
# ifdef MASKING
     &                                                      *rmask(i,j)
# endif

            enddo
          enddo           !--> discard FC,WC,CF,DC

!*** LR, from old code
# if defined PHYS_FLUX_ANALYSIS && defined VERT_DIFF_ANALYSIS
#  ifdef PFA_BY_TRACER
          if (wrt_pfa(itrc)) then
             iflux = pfa_out(itrc)
#  else
             iflux = itrc
#  endif
          do k=1,N
            do i=Istr,Iend
               ! ThisVDF is the old concentration times depth
               ThisVDF(i,j,k) =
     &              (ThisVDF(i,j,k) - t(i,j,k,nnew,itrc) * Hz(i,j,k))
     &              / dt
# ifdef MASKING
     &              * rmask(i,j)
# endif
            enddo
          enddo
          if (itrc .le. NT_PFA) then
             do i=Istr,Iend
             ! unit: mmol / (m2 s)
                VertDiffFlux(i,j,0,iflux) = 0.0 ! Neumann b.c. at bottom
                do k=1,N-1
                   VertDiffFlux(i,j,k,iflux) = ThisVDF(i,j,k) +
     &                  VertDiffFlux(i,j,k-1,iflux)
                end do
                VertDiffFlux(i,j,N,iflux) = 0.0 ! Neumann b.c. at top
             end do
          end if
#  ifdef PFA_BY_TRACER
          end if
#  endif
# endif /* PHYS_FLUX_ANALYSIS & VERT_DIFF_ANALYSIS */


#ifdef CONST_TRACERS
          do k=1,N
            do i=istr,iend
              t(i,j,k,nnew,itrc)=t(i,j,k,nstp,itrc)
            enddo
          enddo

# if defined PHYS_FLUX_ANALYSIS && defined VERT_DIFF_ANALYSIS
#  ifdef PFA_BY_TRACER
          if (wrt_pfa(itrc)) then
#  endif
          if (itrc .le. NT_PFA) then
             do k=1,N
                do i=Istr,Iend
                   VertDiffFlux(i,j,k,itrc) = 0.0
                enddo
             enddo
          end if
#  ifdef PFA_BY_TRACER
          end if
#  endif
# endif /* PHYS_FLUX_ANALYSIS & VERT_DIFF_ANALYSIS */
#endif
        enddo      !<-- j
        call t3dbc_tile (istr,iend,jstr,jend, itrc, wrk1)
      enddo     !<-- itrc

# ifdef TRACER_BE7
        if (itrc .eq. itpas(1)) then
           do k=1,N
              do j=J_RANGE
                 do i=I_RANGE
! half-life is 53 days
                    t(i,j,k,nnew,itpas(1))=t(i,j,k,nnew,itpas(1))/
     &                   (1.0 + dt / (53.0 * 86400.) )
                 enddo
              enddo
           enddo
        end if
# endif /* TRACER_BE7 */

# ifdef BIOLOGY_BEC
      call ecosys_tile(istr,iend,jstr,jend)   ! BEC model
# endif

# if defined EW_PERIODIC || defined NS_PERIODIC || defined MPI
      do itrc=1,NT-1,2
        call exchange_2_tile (istr,iend,jstr,jend,
     &                        t(START_2D_ARRAY,1,nnew,itrc  ), N,
     &                        t(START_2D_ARRAY,1,nnew,itrc+1), N)
      enddo
      if (mod(NT,2).eq.1) then
        call exchange_tile (istr,iend,jstr,jend,
     &                            t(START_2D_ARRAY,1,nnew,NT), N)
      endif
# endif
      return
      end


      subroutine check_step_t_switches (ierr)

! This routine keeps track of the status of CPP-switch settings in
! "compute_horiz_tracer_fluxes.h" and "compute_horiz_vert_fluxes.h".
! This code must be placed here rather than in a separate file in
! order to be exposed to the relevant CPP-settings.   It does not
! affect any model results, other than signature in global attribute
! "CPPS" in output netCDF files.

      implicit none
      integer ierr, is,ie, lenstr
# include "param.h"
# include "strings.h"
      ie=lenstr(cpps)
      is=ie+2
      ie=is+15
      if (ie.gt.max_opt_size) goto 99
      cpps(is:ie)='<step3d_t_ISO.F>'

# include "track_advec_switches.h"

      return
  99  mpi_master_only write(*,'(/1x,2A/12x,A/)')      '### ERROR: ',
     &  'Insufficient length of string "cpps" in file "strings.h".',
     &        'Increase parameter "max_opt_size" it and recompile.'
      ierr=ierr+1
      return
      end
#else
      subroutine step3d_t_empty
      end
#endif  /* SOLVE3D */

